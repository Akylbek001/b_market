package tests;

import base.BaseTest;
import common.consts.CharacterSetConstants;
import common.utils.WaitUtils;
import io.qameta.allure.*;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import static common.consts.CharacterSetConstants.DEPOSIT_AMOUNT_MUST_BE_BETWEEN;
import static io.qameta.allure.Allure.step;
import static pages.DepositPage.*;
import static pages.DepositPage.REFUSED_NOTIFICATION;

@Owner("Алибек Акылбеков")
@Feature("Депозиты => Открыть депозит")
public class DepositOpenTest extends BaseTest {
    @BeforeMethod(alwaysRun = true, description = "Подготовка браузера")
    public void setUpMethod() {
        brManager.clearCache();
        navigation.gotoLoginPage();
        WaitUtils.wait(1);
    }

    @Test(description="Открыть депозит <Баспана>", groups = {"automated"})
    @Issue("https://jira.kz/browse/QA-")
    @Description("Открыть депозит Баспана")
    @Severity(SeverityLevel.CRITICAL)
    public void openBaspanaDeposit() {
        step("Авторизация -> Мои депозиты", () -> {
            loginSteps.auth("77760170303", config.clientPassword());
            mainSteps.clickProfileIcon();
            cabinetSteps.selectMyBankMenu();
            cabinetSteps.selectDepositsMenu();
        });
        step("Открыть депозит", () -> {
            depositSteps.clickNewDepositButton();
            depositSteps.clickOpenBaspanaDepositButton();
            depositSteps.openBaspanaDeposit();
        });
        step("Подтвердить открытие депозита", () -> {
            depositSteps.confirmBySms(config.smsCode());
            Assert.assertEquals("Депозит успешно открыт", elementsAttributes.getValue(SUCCESS));
        });
    }

    //alert error
    @Test(description="Открыть депозит <Баспана> => Валидация договорной суммы <", groups = {"automated"}, enabled = false)
    @Issue("https://jira.kz/browse/QA-")
    @Description("Открыть депозит Баспана")
    @Severity(SeverityLevel.CRITICAL)
    public void openBaspanaDeposit_validateAgreedLessSum() {
        step("Авторизация -> Мои депозиты", () -> {
            loginSteps.auth("77774039707", config.clientPassword());
            brManager.navigateTo(envConfig.baseUrl().concat("Cabinet/MyDeposits"));
        });
        step("Открыть депозит", () -> {
            depositSteps.clickNewDepositButton();
            depositSteps.clickOpenBaspanaDepositButton();
            depositSteps.openBaspanaDeposit();
        });
        step("Подтвердить открытие депозита", () -> {
            depositSteps.agreedSum("150000");
        });
        Assert.assertEquals(
                drManager.getDriver().switchTo().alert().getText(),
                CharacterSetConstants.DEPOSIT_AMOUNT_MUST_BE_BETWEEN
        );
        drManager.getDriver().switchTo().alert().accept();
    }

    //alert error
    @Test(description="Открыть депозит <Баспана> => Валидация договорной суммы >", groups = {"automated"}, enabled = false)
    @Issue("https://jira.kz/browse/QA-")
    @Description("Открыть депозит Баспана")
    @Severity(SeverityLevel.CRITICAL)
    public void openBaspanaDeposit_validateAgreedMaxSum() {
        step("Авторизация -> Мои депозиты", () -> {
            loginSteps.auth("77003896225", config.client_for_password_recovery_newPassword());
            brManager.navigateTo(envConfig.baseUrl().concat("Cabinet/MyDeposits"));
        });
        step("Открыть депозит", () -> {
            depositSteps.clickNewDepositButton();
            depositSteps.clickOpenBaspanaDepositButton();
            depositSteps.openBaspanaDeposit();
        });
        step("Подтвердить открытие депозита", () -> {
            depositSteps.agreedSum("198000000");
        });
        Assert.assertEquals(
                drManager.getDriver().switchTo().alert().getText(),
                DEPOSIT_AMOUNT_MUST_BE_BETWEEN
        );
        drManager.getDriver().switchTo().alert().accept();
    }

    //Нужна соответствующая учетка
    @Test(description="Открыть депозит <Баспана> => Обратитесь в отделение", groups = {"automated"}, enabled = false)
    @Issue("https://jira.kz/browse/QA-")
    @Description("Отказ - Обратитесь в отделение")
    @Severity(SeverityLevel.CRITICAL)
    public void tryOpenBaspanaDeposit() {
        step("Авторизация -> Мои депозиты", () -> {
            loginSteps.auth(
                    config.client_for_password_recovery_login(), config.client_for_password_recovery_newPassword()
            );
            brManager.navigateTo(envConfig.baseUrl().concat("Cabinet/MyDeposits"));
        });
        step("Открыть депозит", () -> {
            depositSteps.clickNewDepositButton();
            depositSteps.clickOpenBaspanaDepositButton();
            depositSteps.openBaspanaDeposit();
        });
        Assert.assertEquals(
                CharacterSetConstants.VISIT_BANK_BRANCH,
                elementsAttributes.getValue(REFUSED_NOTIFICATION)
        );
    }

    @Test(description="Открыть депозит => Валидация ареста", groups = {"automated"})
    @Issue("https://jira.kz/browse/QA-")
    @Description("Отказ - Обратитесь в отделение")
    @Severity(SeverityLevel.CRITICAL)
    public void openDeposit_validate() {
        step("Авторизация -> Мои депозиты", () -> {
            loginSteps.auth("77770077702", config.clientPassword());
            brManager.navigateTo(envConfig.baseUrl().concat("Cabinet/MyDeposits"));
        });
        Assert.assertEquals(
                "Запрет открытия счетов",
                elementsAttributes.getValue(PROHIBITION_OF_OPEN_ACCOUNT)
        );
    }

    //Нужна соответствующая учетка
    @Test(description="Открыть образовательный вклад <AQYL>", groups = {"automated"})
    @Issue("https://jira.kz/browse/QA-")
    @Description("AQYL")
    @Severity(SeverityLevel.CRITICAL)
    public void openAqyl() {
        step("Авторизация -> Мои депозиты", () -> {
            loginSteps.auth(
                    config.client_for_password_recovery_login(), config.client_for_password_recovery_newPassword()
            );
            brManager.navigateTo(envConfig.baseUrl().concat("Cabinet/MyDeposits"));
        });
        step("Открыть депозит", () -> {
            depositSteps.clickNewDepositButton();
            depositSteps.openAqyl();
        });
        Assert.assertTrue(true);
    }

    @Test(description="Открыть обр.вклад <AQYL> => Валидация отсутствия счета", groups = {"automated"})
    @Issue("https://jira.kz/browse/QA-")
    @Description("Отказ - отсутствует текущий счет")
    @Severity(SeverityLevel.CRITICAL)
    public void openAqyl_needAccount() {
        step("Авторизация -> Мои депозиты", () -> {
            loginSteps.auth("77755509188", config.clientPassword());
            brManager.navigateTo(envConfig.baseUrl().concat("Cabinet/MyDeposits"));
        });
        step("Открыть депозит", () -> {
            depositSteps.clickNewDepositButton();
            depositSteps.openAqyl();
        });
        Assert.assertEquals(
                CharacterSetConstants.NEED_TO_OPEN_CURRENT_ACCOUNT_TEXT,
                elementsAttributes.getValue(REFUSED_NOTIFICATION)
        );
    }

    @Test(description="Открыть обр.вклад <AQYL> => не достаточно средств", groups = {"automated"})
    @Issue("https://jira.kz/browse/QA-")
    @Description("Отказ - не достаточно средств")
    @Severity(SeverityLevel.CRITICAL)
    public void openAqyl_insufficientFunds() {
        step("Авторизация -> Мои депозиты", () -> {
            loginSteps.auth("77774039707", config.clientPassword());
            brManager.navigateTo(envConfig.baseUrl().concat("Cabinet/MyDeposits"));
        });
        step("Открыть депозит", () -> {
            depositSteps.clickNewDepositButton();
            depositSteps.openAqyl();
        });
        Assert.assertEquals(
                CharacterSetConstants.INSUFFICIENT_FOUND_TEXT, elementsAttributes.getValue(REFUSED_NOTIFICATION));
    }

    //нужна учетка
    @Test(description="Открыть обр.вклад <AQYL> => отсутсвует в базе налогового органа", groups = {"automated"}, enabled = false)
    @Issue("https://jira.kz/browse/QA-")
    @Description("Отказ - отсутсвует в базе налогового органа")
    @Severity(SeverityLevel.CRITICAL)
    public void openAqyl_notInTaxAuthorityDatabase() {
        step("Авторизация -> Мои депозиты", () -> {
            loginSteps.auth(
                    config.client_for_password_recovery_login(), config.client_for_password_recovery_newPassword()
            );
            brManager.navigateTo(envConfig.baseUrl().concat("Cabinet/MyDeposits"));
        });
        step("Открыть депозит", () -> {
            depositSteps.clickNewDepositButton();
            depositSteps.openAqyl();
        });
        Assert.assertEquals(
                CharacterSetConstants.NOT_IN_TAX_AUTHORITY_DATABASE_TEXT.replace(
                        config.clientInvalidIin(), config.client_for_password_recovery_iin()
                ),
                elementsAttributes.getValue(REFUSED_NOTIFICATION)
        );
    }
}
